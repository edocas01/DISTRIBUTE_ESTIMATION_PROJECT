INCONTRO CON FONTANELLI 20/04/2023

	Localizzazione distribuita con solo misure di distanza è impossibile perchè il prolema non è osservabile.
	Quindi conviene fare come abbiamo fatto con misure relative.
	Il consenso si può fare solo se gli agenti scambiano la stessa informazione:
	nel caso in analisi ogni robot deve condividere con gli altri già una stima di posizione del target.
	

	GLi ostacoli conviene trattarli come misure di segmenti e conosciamo tipo gli angoli cose così 
	(sarebbe interessante provare ad avere misure di un LIDAR anche per le misure relative tra robots e target)

	Voronoi possiamo definire una gaussiana di peso che ha un massimo in un anello circolare per mantenere una certa distanza
	e poi volendo un' altra gaussiana per ogni robot per mantere la distanza con gli altri robot.
	Quindi avremo il centroide di voronoi e poi bisogna fare il controllo.
	Se il robot è lineare il controllo è banale, altrimenti con un uniciclo il controllo va fatto considerando di generare una 
	traiettoria oppure facendo un controllo di velocità.

	N.B. le celle di voronoi non sono convesse ma il robot rispetto alla sua posizione le vede convesse. Può raggiungere
	ogni posizione senza sbattere.




TODO:
far vedere performance di ogni setp:
	Localizzazione
	stima target
	controllo
	...
fare stessa simulazione con diverso numero di ROBOT
far vedere cosa "vede" ad esempio il robot 1 durante le simulazioni come sono le incertezze e cose così
fare unicicli  
fare laserscan
valutare piu forme
far vedere le performance (definire dei parametri)
far vedere voronoi
estrazione features di ostacoli (eventuali pareti ...)

SE aggiungo o tolgo robot cosa succede

alcuni robot più lenti di altri

far vedere i potenziali delle gaussiane


Ci si puo muovere fino a metà del raggio di comunicazione per essere sicuri di non sbattere con altri robot


Inoltre se un robot è dentro il mio raggio posso unire la mia informazione sulla sua posizione con la sua 
informazione sulla sua posizione se lui è in grado di darmela. Limitare anche la cella considerando l'ingombro del robotimage.png


Kp is at maximum equal to 1/dt:
- u = kp*(pi - ci) 
- dx = u * dt = kp*(pi - ci)*dt <= pi - ci => kp <= 1/dt
Il centroide viene ricalcolato ad ogni step. L'area raggiungerà un limite in cui non può più andare oltre nella direzione in cui si muove il robot mentre il robot continuando ad andare nella stessa direzione diminuirà l'area dietro di sè spostando il baricentro geometrico sempre più avanti. Dato che la funzione peso raggiunge il massimo sempre nella stessa posizione, il baricentro oscillerà e così anche il robot. L'oscillazione non è dovuta al controllo proporzionale dato che usiamo kp <= 1 / dt. L'oscillazione si può limitare settando kp minore di 1 / dt in modo tale che l'area non cambi eccessivamente tra uno step e il successivo una volta raggiunto il limite di espansione nella direzione del moto.
---------- INCONTRO CON FONTANELLI 04/05/2023 ----------

il robot ha una velocità massima e di conseguenza so lo spostamento massimo del robot che puo avvenire
in un time step. Quindi o riduco la cella oppure aumento l'ingombro del robot
La legge di controllo delle slide funziona se è tempo continuo. se ho tempo discreto o riduco le celle o gonfio i robot.
Se limito kp allora posso stare dentro la cella (che deve comunque essere modificata con un certo ingombro).

la legge di controllo nel caso di un uniciclo deve garantirmi di stare nella cella quindi devo impostare una
omega massima e agire su v lineare di conseguenza.

Per considerare l'incertezza posso avvicinare i robot di un certo fattore di copertura.

Per garantire i requirements:

- limitare kp come detto sopra
- ridurre la cella del raggio del robot (svantaggio -> cella piccola, vantaggio -> semplice la gestione e non si necessita
  di ulteriori informazioni degli altri)
- aumentare il raggio di ingombro del robot di una quantità pari a vmax * dt (massimo spazio che può percorrere
  in un time step) -> riduco la cella solo se è possibile che io esca, altrimenti la lascio "grande"


GESTIONE INCERTEZZA:

- nel caso io veda un robot -> lo avvicino di una distanza pari al doppio della somma delle incertezze in quella specifica
							   direzione

CONSENSO: 
	ha senso fare un consenso sulla posizione di tutti i robot? che vantaggi da? si riduce l'incertezza globale

DOMANDE DA FARE:

- per condisderare l'incertezza su voronoi va bene fare l'inviluppo dell'elissoide di incertezza sulla cella?	
  In questo modo si è "sicuri" di non uscire, però il rischio è di ridurre tanto la propria cella.

- al fine di localizzare i robot noi abbiamo considerato di avere uno stato x, y "privato" di ogni robot. Poi abbiamo
  fatto un consenso sulla posizione del target. Possiamo fare un consenso "globale" dove ogni robot condivide la misura
  che fa sugli altri (x,y) e in più aggiunge sul suo stato la sua misura di gps? Quindi si ha uno stato X con dentro
  tutte le posizioni di tutti i robot e la posizione del target -> la misura che i fa su j è correlata 
  a quella che j fa su i. Nel kalman filter distribuito questo è un problema di ingressi correlati come se avessi
  un unico kalman filter centralizzato o si può fare?
  Fase di predizione:
	ogni robot può predirre solo la sua posizione.
  Fase di update:
	ogni robot fa le misure sugli altri e gps su se stesso. 
	condivisione delle informazioni tra i robot con kalman filter distribuito. Non ho correlazione?
  In caso la matrice di covarianza non diventa a blocchi perchè le incertezze sono correlate, corretto?


RIDUZIONE TOTALE:

- posiziono il robot j lungo la congiungente tra i due robot ma avvicinato del max(sigmaj)*3
  NOTA: il robot va mosso lungo la congiungente dei due robot altrimenti si rischia di avere intersezioni
- creo un punto fittizio avvicinando questo punto di una distanza pari a 2*(max(sigmai)*3 + delta)
- riduco rs di delta + 3*max(sigmai)
- NOTA: la cella va ridotta del max(sigmai) poichè il robot potendo in generale ruotare, può far ruotare
  il proprio elissoide in tutte le direzioni -> prendo la circonferenza circoscritta
- NOTA: la cella va sempre ridotta dell'incertezza perchè entra sempre in gioco. Il delta viene considerato
		solo in relazione a vmax.
- NOTA: sembra funzionare anche con un fattore di copertura di 1 (anzichè 3)
- NOTA: è sempre necessario avviciniare del doppio del volume/incertezza perché così la cella si riduce esattamente
		della quantità desiderata. Altrimenti sposterei solo di una parte del mio volume/incertezza.
Nel report/presentazione far vedere che le zone si intersecano se non consideriamo le incertezze e far vedere
come dopo le zone sono modificate

RIDURRE IL FIELD OF VIEW DEI ROBOT -> zona di comunicazione è circolare ma i robot hanno la telecamera con 150° di visione

---------- INCONTRO CON FONTANELLI 11/05/2023 ----------
Il distributed kalmann filter si può fare anche se le misure sono correlate, la matrice di covarianza non verrà diagonale.
La riduzione della cella come avevamo pensato va bene.

-------------------------------------------------------------------------------------------- dopo pausa estate

- sistemare i bug, sistemare voronoi
	implementare sicurezza su spostamento voronoi -> FATTO
- sistemare equidistanza tra robot: -> FATTO
	- vedere come un robot vede gli altri
	- salvare una possibile traiettoria del target
- ostacoli (statici e dinamici):
	- simulare misurazioni di ostacoli, introdurli in voronoi -> FATTO
- TODO:
	- quando un robot si incaglia, potremmo fargli seguire la traiettoria del target
	- ostacoli come pareti:
		a differenza degli ostacoli puntuali (che possono anche muoversi ed in quel caso ci sta fare voronoi per essere più conservativi) le pareti
		possono essere trattate semplicemente considerando che un robot nel caso vi si avvicini, riduca la sua cella quel tanto che basta da non toccarla.
- dinamica non lineare